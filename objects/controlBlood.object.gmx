<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Blood particle system
global.instances++;

part_blood_sys = part_system_create();
part_system_depth(part_blood_sys, -7998);

// Blood particle
part_blood = part_type_create();
part_type_shape(part_blood, pt_shape_disk);
part_type_size(part_blood, 0.4, 0.2, -0.01, 0);
part_type_color1(part_blood, c_red);
part_type_alpha1(part_blood, 1);
part_type_speed(part_blood, 1, 3, 0, 0);
part_type_direction(part_blood, 0, 359, 0, 0);
part_type_gravity(part_blood, 0.3, 270);
part_type_blend(part_blood, 0);
part_type_life(part_blood, 30, 700); //hmm?

// Create emitter
part_blood_emit = part_emitter_create(part_blood_sys);

// Create blood surface
surf_blood = surface_create(room_width, room_height);



/////////////////



part_bloodspray_sys = part_system_create();
part_system_depth(part_bloodspray_sys, -7999);

// Blood particle
part_bloodspray = part_type_create();
part_type_shape(part_bloodspray, pt_shape_sphere);
part_type_size(part_bloodspray, 0.3, 0.8, 0.02, 0);

//part_type_color1(part_bloodspray, c_red);
part_type_color2(part_bloodspray,make_color_rgb(200,0,0),make_color_rgb(255,0,0));
//part_type_alpha1(part_bloodspray, .6);

part_type_alpha2(part_bloodspray,1.0,0.2);
part_type_speed(part_bloodspray, 5, 7, 0, 0);

part_type_direction(part_bloodspray, 0, 359, 0, 0);
part_type_gravity(part_bloodspray, 0.15, 270);
part_type_blend(part_bloodspray, false);
part_type_life(part_bloodspray, 15, 30);

// Create emitter
part_bloodspray_emit = part_emitter_create(part_bloodspray_sys);

// Conservation
//canDraw = true;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy
global.instances--;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step code
if (!surface_exists(surf_blood))
{
    surf_blood = surface_create(room_width, room_height);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear the surface

if (part_system_exists(part_blood_sys)) 
{
    part_type_destroy(part_blood);
    part_emitter_destroy(part_blood_sys,part_blood_emit);
    part_system_destroy(part_blood_sys);
}


if (part_system_exists(part_bloodspray_sys)) 
{
    part_type_destroy(part_bloodspray);
    part_emitter_destroy(part_bloodspray_sys,part_bloodspray_emit);
    part_system_destroy(part_bloodspray_sys);
}


if (surface_exists(surf_blood)) surface_free(surf_blood);

instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean

instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the blood surface

if (!surface_exists(surf_blood))
    surf_blood = surface_create(room_width, room_height);

else
{
 //   shader_set(PassThroughShader);
       draw_set_alpha(0.9);
       draw_set_color(c_red);
       draw_surface(surf_blood,0,0);
 //   shader_reset();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
